
// Copyright (c) 2019 PaddlePaddle Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once
#include<vector>
#include<map>
#include<string>

const std::vector<std::vector<std::string>> supported_ops_target = {

    // kUnk_OPS: 
    {"__xpu__dynamic_lstm_fuse_op","max_pool2d_with_index","fake_quantize_dequantize_moving_average_abs_max","topk_pooling","fake_quantize_dequantize_abs_max","__xpu__multi_encoder","var_conv_2d","conv3d","__xpu__sfa_head","search_seq_fc","search_grnn","__xpu__resnet50","__xpu__embedding_with_eltwise_add","fake_dequantize_max_abs","__xpu__multi_softmax","sequence_arithmetic","search_seq_arithmetic","search_aligned_mat_mul","sequence_pool_concat","fake_channel_wise_dequantize_max_abs","__xpu__softmax_topk","__xpu__squeeze_excitation_block","__xpu__fc","__xpu__mmdnn_search_attention","__xpu__mmdnn_search_attention2","match_matrix_tensor","fpga_conv2d","fake_channel_wise_quantize_dequantize_abs_max","__xpu__logit","fake_quantize_moving_average_abs_max","sequence_reverse","__xpu__resnet_cbam","search_seq_depadding","sequence_reverse_embedding","__xpu__mmdnn_bid_emb_grnn_att","__xpu__mmdnn_bid_emb_grnn_att2","__xpu__mmdnn_bid_emb_att","__xpu__mmdnn_match_conv_topk","__xpu__mmdnn_merge_all","search_fc","fake_quantize_range_abs_max","fake_quantize_abs_max","sequence_topk_avg_pooling","subgraph","sequence_concat","attention_padding_mask","search_attention_padding_mask","__xpu__bigru","softsign","__xpu__generate_sequence","sequence_reshape","search_group_padding","__xpu__conv2d","search_seq_softmax"},

    // kHost_OPS: 
    {"fill_constant_batch_size_like","unsqueeze","sigmoid","uniform_random","flatten2","retinanet_detection_output","shape","expand_as","less_than","cumsum","read_from_array","one_hot","one_hot_v2","thresholded_relu","pad2d","reduce_any","sequence_mask","fill_zeros_like","norm","split","matrix_nms","leaky_relu","pad3d","expand_v2","fill_any_like","relu_clipped","strided_slice","deformable_conv","hard_swish","density_prior_box","greater_than","prior_box","where","sequence_unpad","square","crop","unique_with_counts","logical_and","flatten","multiclass_nms3","multiclass_nms2","tile","select_input","crf_decoding","polygon_box_transform","abs","generate_proposals_v2","reduce_all","conditional_block","sequence_softmax","top_k","tril_triu","collect_fpn_proposals","beam_search","inverse","unfold","generate_proposals","unsqueeze2","prelu","cos","reverse","p_norm","equal","hard_sigmoid","argsort","range","meshgrid","less_equal","assign","feed","fill_constant","squeeze2","sequence_expand","logical_xor","log","yolo_box","reshape2","print","relu","stack","box_coder","distribute_fpn_proposals","gather_nd","top_k_v2","roi_align","sequence_pad","tensor_array_to_tensor","box_clip","linspace","squeeze","lod_reset","not_equal","reciprocal","tanh","flip","ctc_align","cast","while","pixel_shuffle","elu","fetch","write_back","index_select","assign_value","logical_or","increment","write_to_array","floor","reshape","beam_search_decode","unstack","crop_tensor","multiclass_nms","sin","gaussian_random","lod_array_length","rsqrt","gather_tree","relu6","arg_max","is_empty","cos_sim","anchor_generator","expand","unbind","swish","logical_not","greater_equal","gather","roi_perspective_transform","where_index","exp","correlation","shuffle_channel","flatten_contiguous_range","scatter_nd_add"},

    // kX86_OPS: 
    {},
    // kCUDA_OPS: 
    {},
    // kARM_OPS: 
    {"nearest_interp","depthwise_conv2d","sigmoid","layer_norm","hard_swish","bilinear_interp_v2","lstm","conv2d_transpose","deformable_conv","thresholded_relu","pad2d","merge_lod_tensor","grid_sampler","lookup_table","fusion_elementwise_add_activation","norm","elu","rnn","lrn","leaky_relu","split_lod_tensor","gelu","relu_clipped","tanh","fusion_elementwise_div_activation","softmax","prior_box","batch_norm","square","sign","gru_unit","slice","depthwise_conv2d_transpose","bilinear_interp","fusion_elementwise_sub_activation","sum","abs","calib","mul","elementwise_mul","calib_once","transpose","relu6","affine_grid","im2sequence","layout","prelu","p_norm","hard_sigmoid","softplus","elementwise_pow","matmul","fc","arg_max","mean","conv2d","mish","pow","lookup_table_v2","affine_channel","sequence_expand_as","fusion_elementwise_max_activation","relu","elementwise_floordiv","log","yolo_box","negative","elementwise_mod","elementwise_add","box_coder","matmul_v2","sequence_pool","dropout","sparse_conv2d","fusion_elementwise_min_activation","reduce_mean","reciprocal","elementwise_div","elementwise_sub","instance_norm","erf","pixel_shuffle","scatter","decode_bboxes","nearest_interp_v2","clip","axpy","gru","fusion_elementwise_mul_activation","reduce_prod","floor","sqrt","reduce_max","transpose2","elementwise_max","sequence_conv","reduce_sum","rsqrt","reduce_min","elementwise_min","scale","group_norm","pool2d","concat","layout_once","swish","lookup_table_dequant","exp","shuffle_channel","sync_batch_norm"},

    // kOpenCL_OPS: 
    {"nearest_interp","unsqueeze","nearest_interp_v2","swish","pool2d","clip","sigmoid","flatten2","abs","elementwise_add","shape","square","flatten","io_copy","io_copy_once","tan","conv2d_transpose","asin","scale","depthwise_conv2d_transpose","matmul_v2","bilinear_interp","fusion_elementwise_div_activation","elementwise_pow","reshape","rsqrt","bilinear_interp_v2","reshape2","grid_sampler","reduce_max","box_coder","split","transpose2","pad2d","fusion_elementwise_add_activation","fusion_elementwise_mul_activation","elementwise_max","sin","softmax","expand","tanh","elementwise_mul","atan","layout_once","max","dropout","transpose","relu6","lrn","arg_max","elementwise_min","fc","shuffle_channel","depthwise_conv2d","sqrt","layout","unsqueeze2","squeeze","concat","prelu","reduce_mean","cos","elementwise_mod","slice","elementwise_div","elementwise_sub","relu","instance_norm","hard_swish","hard_sigmoid","leaky_relu","fusion_elementwise_sub_activation","matmul","squeeze2","sync_batch_norm","exp","pixel_shuffle","greater_than","acos","yolo_box","conv2d","batch_norm"},

    // kAny_OPS: 
    {},
    // kFPGA_OPS: 
    {},
    // kNPU_OPS: 
    {},
    // kXPU_OPS: 
    {},
    // kBM_OPS: 
    {},
    // kMLU_OPS: 
    {},
    // kRKNPU_OPS: 
    {},
    // kAPU_OPS: 
    {},
    // kHuaweiAscendNPU_OPS: 
    {},
    // kImaginationNNA_OPS: 
    {},
    // kIntelFPGA_OPS: 
    {},
    // kMetal_OPS: 
    {},
    // kNNAdapter_OPS: 
    {},};
const std::map<std::string, std::vector<std::string>> supported_ops={
    {"beam_search_decode", { "kHost" }},
    {"ctc_align", { "kHost" }},
    {"__xpu__dynamic_lstm_fuse_op", { "kUnk" }},
    {"fetch", { "kHost" }},
    {"axpy", { "kARM" }},
    {"mean", { "kARM" }},
    {"where_index", { "kHost" }},
    {"select_input", { "kHost" }},
    {"io_copy_once", { "kOpenCL" }},
    {"conv2d_transpose", { "kARM", "kOpenCL" }},
    {"depthwise_conv2d_transpose", { "kARM", "kOpenCL" }},
    {"pow", { "kARM" }},
    {"crop", { "kHost" }},
    {"fusion_elementwise_sub_activation", { "kARM", "kOpenCL" }},
    {"fusion_elementwise_add_activation", { "kARM", "kOpenCL" }},
    {"fusion_elementwise_mul_activation", { "kARM", "kOpenCL" }},
    {"fusion_elementwise_max_activation", { "kARM" }},
    {"fusion_elementwise_min_activation", { "kARM" }},
    {"fusion_elementwise_div_activation", { "kARM", "kOpenCL" }},
    {"max_pool2d_with_index", { "kUnk" }},
    {"fake_quantize_dequantize_moving_average_abs_max", { "kUnk" }},
    {"topk_pooling", { "kUnk" }},
    {"fake_quantize_dequantize_abs_max", { "kUnk" }},
    {"tril_triu", { "kHost" }},
    {"dropout", { "kARM", "kOpenCL" }},
    {"where", { "kHost" }},
    {"rnn", { "kARM" }},
    {"strided_slice", { "kHost" }},
    {"pad2d", { "kHost", "kARM", "kOpenCL" }},
    {"anchor_generator", { "kHost" }},
    {"range", { "kHost" }},
    {"write_back", { "kHost" }},
    {"roi_align", { "kHost" }},
    {"logical_xor", { "kHost" }},
    {"logical_and", { "kHost" }},
    {"logical_or", { "kHost" }},
    {"logical_not", { "kHost" }},
    {"sequence_expand", { "kHost" }},
    {"lookup_table_dequant", { "kARM" }},
    {"__xpu__multi_encoder", { "kUnk" }},
    {"slice", { "kARM", "kOpenCL" }},
    {"unfold", { "kHost" }},
    {"var_conv_2d", { "kUnk" }},
    {"sparse_conv2d", { "kARM" }},
    {"conditional_block", { "kHost" }},
    {"sequence_pad", { "kHost" }},
    {"matrix_nms", { "kHost" }},
    {"gru", { "kARM" }},
    {"box_clip", { "kHost" }},
    {"conv2d", { "kARM", "kOpenCL" }},
    {"conv3d", { "kUnk" }},
    {"depthwise_conv2d", { "kARM", "kOpenCL" }},
    {"__xpu__sfa_head", { "kUnk" }},
    {"search_seq_fc", { "kUnk" }},
    {"transpose", { "kARM", "kOpenCL" }},
    {"transpose2", { "kARM", "kOpenCL" }},
    {"search_grnn", { "kUnk" }},
    {"unsqueeze", { "kHost", "kOpenCL" }},
    {"unsqueeze2", { "kHost", "kOpenCL" }},
    {"fc", { "kARM", "kOpenCL" }},
    {"polygon_box_transform", { "kHost" }},
    {"__xpu__resnet50", { "kUnk" }},
    {"prior_box", { "kHost", "kARM" }},
    {"calib", { "kARM" }},
    {"increment", { "kHost" }},
    {"assign", { "kHost" }},
    {"expand_v2", { "kHost" }},
    {"__xpu__embedding_with_eltwise_add", { "kUnk" }},
    {"lod_reset", { "kHost" }},
    {"deformable_conv", { "kHost", "kARM" }},
    {"top_k_v2", { "kHost" }},
    {"fake_dequantize_max_abs", { "kUnk" }},
    {"__xpu__multi_softmax", { "kUnk" }},
    {"sequence_arithmetic", { "kUnk" }},
    {"search_seq_arithmetic", { "kUnk" }},
    {"sum", { "kARM" }},
    {"beam_search", { "kHost" }},
    {"stack", { "kHost" }},
    {"expand", { "kHost", "kOpenCL" }},
    {"affine_grid", { "kARM" }},
    {"sequence_conv", { "kARM" }},
    {"matmul", { "kARM", "kOpenCL" }},
    {"sequence_pool", { "kARM" }},
    {"search_aligned_mat_mul", { "kUnk" }},
    {"generate_proposals_v2", { "kHost" }},
    {"sequence_pool_concat", { "kUnk" }},
    {"gaussian_random", { "kHost" }},
    {"pool2d", { "kARM", "kOpenCL" }},
    {"one_hot_v2", { "kHost" }},
    {"sequence_unpad", { "kHost" }},
    {"fake_channel_wise_dequantize_max_abs", { "kUnk" }},
    {"linspace", { "kHost" }},
    {"__xpu__softmax_topk", { "kUnk" }},
    {"cos", { "kHost", "kOpenCL" }},
    {"__xpu__squeeze_excitation_block", { "kUnk" }},
    {"uniform_random", { "kHost" }},
    {"norm", { "kHost", "kARM" }},
    {"p_norm", { "kHost", "kARM" }},
    {"one_hot", { "kHost" }},
    {"feed", { "kHost" }},
    {"__xpu__fc", { "kUnk" }},
    {"crop_tensor", { "kHost" }},
    {"index_select", { "kHost" }},
    {"tile", { "kHost" }},
    {"layer_norm", { "kARM" }},
    {"sign", { "kARM" }},
    {"print", { "kHost" }},
    {"grid_sampler", { "kARM", "kOpenCL" }},
    {"generate_proposals", { "kHost" }},
    {"negative", { "kARM" }},
    {"pad3d", { "kHost" }},
    {"retinanet_detection_output", { "kHost" }},
    {"affine_channel", { "kARM" }},
    {"elementwise_sub", { "kARM", "kOpenCL" }},
    {"elementwise_add", { "kARM", "kOpenCL" }},
    {"elementwise_mul", { "kARM", "kOpenCL" }},
    {"elementwise_max", { "kARM", "kOpenCL" }},
    {"elementwise_min", { "kARM", "kOpenCL" }},
    {"elementwise_div", { "kARM", "kOpenCL" }},
    {"elementwise_floordiv", { "kARM" }},
    {"elementwise_mod", { "kARM", "kOpenCL" }},
    {"elementwise_pow", { "kARM", "kOpenCL" }},
    {"calib_once", { "kARM" }},
    {"__xpu__mmdnn_search_attention", { "kUnk" }},
    {"__xpu__mmdnn_search_attention2", { "kUnk" }},
    {"gather", { "kHost" }},
    {"match_matrix_tensor", { "kUnk" }},
    {"reverse", { "kHost" }},
    {"matmul_v2", { "kARM", "kOpenCL" }},
    {"fpga_conv2d", { "kUnk" }},
    {"shape", { "kHost", "kOpenCL" }},
    {"fake_channel_wise_quantize_dequantize_abs_max", { "kUnk" }},
    {"crf_decoding", { "kHost" }},
    {"__xpu__logit", { "kUnk" }},
    {"scatter_nd_add", { "kHost" }},
    {"instance_norm", { "kARM", "kOpenCL" }},
    {"split_lod_tensor", { "kARM" }},
    {"fake_quantize_moving_average_abs_max", { "kUnk" }},
    {"roi_perspective_transform", { "kHost" }},
    {"layout_once", { "kARM", "kOpenCL" }},
    {"io_copy", { "kOpenCL" }},
    {"sequence_reverse", { "kUnk" }},
    {"meshgrid", { "kHost" }},
    {"__xpu__resnet_cbam", { "kUnk" }},
    {"yolo_box", { "kHost", "kARM", "kOpenCL" }},
    {"while", { "kHost" }},
    {"gather_tree", { "kHost" }},
    {"pixel_shuffle", { "kHost", "kARM", "kOpenCL" }},
    {"group_norm", { "kARM" }},
    {"scale", { "kARM", "kOpenCL" }},
    {"distribute_fpn_proposals", { "kHost" }},
    {"is_empty", { "kHost" }},
    {"inverse", { "kHost" }},
    {"assign_value", { "kHost" }},
    {"lod_array_length", { "kHost" }},
    {"layout", { "kARM", "kOpenCL" }},
    {"fill_constant", { "kHost" }},
    {"merge_lod_tensor", { "kARM" }},
    {"sin", { "kHost", "kOpenCL" }},
    {"sequence_softmax", { "kHost" }},
    {"flip", { "kHost" }},
    {"flatten", { "kHost", "kOpenCL" }},
    {"flatten2", { "kHost", "kOpenCL" }},
    {"flatten_contiguous_range", { "kHost" }},
    {"scatter", { "kARM" }},
    {"lookup_table", { "kARM" }},
    {"fill_zeros_like", { "kHost" }},
    {"search_seq_depadding", { "kUnk" }},
    {"clip", { "kARM", "kOpenCL" }},
    {"cos_sim", { "kHost" }},
    {"sequence_reverse_embedding", { "kUnk" }},
    {"gather_nd", { "kHost" }},
    {"__xpu__mmdnn_bid_emb_grnn_att", { "kUnk" }},
    {"__xpu__mmdnn_bid_emb_grnn_att2", { "kUnk" }},
    {"__xpu__mmdnn_bid_emb_att", { "kUnk" }},
    {"__xpu__mmdnn_match_conv_topk", { "kUnk" }},
    {"__xpu__mmdnn_merge_all", { "kUnk" }},
    {"fill_any_like", { "kHost" }},
    {"unstack", { "kHost" }},
    {"search_fc", { "kUnk" }},
    {"fake_quantize_range_abs_max", { "kUnk" }},
    {"fake_quantize_abs_max", { "kUnk" }},
    {"sequence_topk_avg_pooling", { "kUnk" }},
    {"im2sequence", { "kARM" }},
    {"cast", { "kHost" }},
    {"box_coder", { "kHost", "kARM", "kOpenCL" }},
    {"split", { "kHost", "kOpenCL" }},
    {"unique_with_counts", { "kHost" }},
    {"cumsum", { "kHost" }},
    {"subgraph", { "kUnk" }},
    {"sequence_concat", { "kUnk" }},
    {"reduce_sum", { "kARM" }},
    {"reduce_prod", { "kARM" }},
    {"reduce_max", { "kARM", "kOpenCL" }},
    {"reduce_min", { "kARM" }},
    {"reduce_all", { "kHost" }},
    {"reduce_any", { "kHost" }},
    {"reduce_mean", { "kARM", "kOpenCL" }},
    {"equal", { "kHost" }},
    {"not_equal", { "kHost" }},
    {"less_than", { "kHost" }},
    {"less_equal", { "kHost" }},
    {"greater_than", { "kHost", "kOpenCL" }},
    {"greater_equal", { "kHost" }},
    {"lrn", { "kARM", "kOpenCL" }},
    {"attention_padding_mask", { "kUnk" }},
    {"search_attention_padding_mask", { "kUnk" }},
    {"read_from_array", { "kHost" }},
    {"write_to_array", { "kHost" }},
    {"__xpu__bigru", { "kUnk" }},
    {"reshape", { "kHost", "kOpenCL" }},
    {"reshape2", { "kHost", "kOpenCL" }},
    {"concat", { "kARM", "kOpenCL" }},
    {"shuffle_channel", { "kHost", "kARM", "kOpenCL" }},
    {"square", { "kHost", "kARM", "kOpenCL" }},
    {"relu_clipped", { "kHost", "kARM" }},
    {"swish", { "kHost", "kARM", "kOpenCL" }},
    {"log", { "kHost", "kARM" }},
    {"exp", { "kHost", "kARM", "kOpenCL" }},
    {"abs", { "kHost", "kARM", "kOpenCL" }},
    {"floor", { "kHost", "kARM" }},
    {"hard_sigmoid", { "kHost", "kARM", "kOpenCL" }},
    {"sqrt", { "kARM", "kOpenCL" }},
    {"rsqrt", { "kHost", "kARM", "kOpenCL" }},
    {"softsign", { "kUnk" }},
    {"gelu", { "kARM" }},
    {"hard_swish", { "kHost", "kARM", "kOpenCL" }},
    {"reciprocal", { "kHost", "kARM" }},
    {"mish", { "kARM" }},
    {"sigmoid", { "kHost", "kARM", "kOpenCL" }},
    {"tanh", { "kHost", "kARM", "kOpenCL" }},
    {"relu", { "kHost", "kARM", "kOpenCL" }},
    {"leaky_relu", { "kHost", "kARM", "kOpenCL" }},
    {"relu6", { "kHost", "kARM", "kOpenCL" }},
    {"prelu", { "kHost", "kARM", "kOpenCL" }},
    {"thresholded_relu", { "kHost", "kARM" }},
    {"elu", { "kHost", "kARM" }},
    {"erf", { "kARM" }},
    {"softplus", { "kARM" }},
    {"lookup_table_v2", { "kARM" }},
    {"correlation", { "kHost" }},
    {"__xpu__generate_sequence", { "kUnk" }},
    {"lstm", { "kARM" }},
    {"bilinear_interp_v2", { "kARM", "kOpenCL" }},
    {"nearest_interp_v2", { "kARM", "kOpenCL" }},
    {"arg_max", { "kHost", "kARM", "kOpenCL" }},
    {"sequence_expand_as", { "kARM" }},
    {"gru_unit", { "kARM" }},
    {"sequence_mask", { "kHost" }},
    {"sequence_reshape", { "kUnk" }},
    {"search_group_padding", { "kUnk" }},
    {"argsort", { "kHost" }},
    {"squeeze", { "kHost", "kOpenCL" }},
    {"squeeze2", { "kHost", "kOpenCL" }},
    {"__xpu__conv2d", { "kUnk" }},
    {"nearest_interp", { "kARM", "kOpenCL" }},
    {"bilinear_interp", { "kARM", "kOpenCL" }},
    {"mul", { "kARM" }},
    {"multiclass_nms", { "kHost" }},
    {"multiclass_nms2", { "kHost" }},
    {"multiclass_nms3", { "kHost" }},
    {"top_k", { "kHost" }},
    {"density_prior_box", { "kHost" }},
    {"tensor_array_to_tensor", { "kHost" }},
    {"fill_constant_batch_size_like", { "kHost" }},
    {"decode_bboxes", { "kARM" }},
    {"batch_norm", { "kARM", "kOpenCL" }},
    {"sync_batch_norm", { "kARM", "kOpenCL" }},
    {"collect_fpn_proposals", { "kHost" }},
    {"search_seq_softmax", { "kUnk" }},
    {"softmax", { "kARM", "kOpenCL" }},
    {"expand_as", { "kHost" }}
};